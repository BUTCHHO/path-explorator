[33mcommit 737a0c7337aae91a54958a670a4bda26a4269eef[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
Author: butcho <skeletorkoltmm@gmail.com>
Date:   Fri May 16 16:15:26 2025 +0300

    fatal errors fix

[1mdiff --git a/.gitignore b/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..4f03656[m
[1m--- /dev/null[m
[1m+++ b/.gitignore[m
[36m@@ -0,0 +1,25 @@[m
[32m+[m[32m# Python[m
[32m+[m[32mvenv/[m
[32m+[m[32m.env/[m
[32m+[m[32m*.py[cod][m
[32m+[m[32m__pycache__/[m
[32m+[m[32m*.egg-info/[m
[32m+[m[32mdist/[m
[32m+[m[32mbuild/[m
[32m+[m[32m.pytest_cache/[m
[32m+[m[32m.mypy_cache/[m
[32m+[m
[32m+[m[32m# PyCharm (JetBrains IDE)[m
[32m+[m[32m.idea/[m
[32m+[m[32m*.iml[m
[32m+[m[32m*.ipr[m
[32m+[m[32m*.iws[m
[32m+[m[32m.idea_modules/[m
[32m+[m
[32m+[m[32m# VSCode[m
[32m+[m[32m.vscode/[m
[32m+[m[32m*.code-workspace[m
[32m+[m
[32m+[m[32m# System[m
[32m+[m[32m.DS_Store[m
[32m+[m[32mThumbs.db[m
\ No newline at end of file[m
[1mdiff --git a/LICENSE b/LICENSE[m
[1mnew file mode 100644[m
[1mindex 0000000..92ad103[m
[1m--- /dev/null[m
[1m+++ b/LICENSE[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32mMIT License[m
[32m+[m
[32m+[m[32mCopyright (c) 2025 BUTCHHO[m
[32m+[m
[32m+[m[32mPermission is hereby granted, free of charge, to any person obtaining a copy[m
[32m+[m[32mof this software and associated documentation files (the "Software"), to deal[m
[32m+[m[32min the Software without restriction, including without limitation the rights[m
[32m+[m[32mto use, copy, modify, merge, publish, distribute, sublicense, and/or sell[m
[32m+[m[32mcopies of the Software, and to permit persons to whom the Software is[m
[32m+[m[32mfurnished to do so, subject to the following conditions:[m
[32m+[m
[32m+[m[32mThe above copyright notice and this permission notice shall be included in all[m
[32m+[m[32mcopies or substantial portions of the Software.[m
[32m+[m
[32m+[m[32mTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR[m
[32m+[m[32mIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,[m
[32m+[m[32mFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE[m
[32m+[m[32mAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER[m
[32m+[m[32mLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,[m
[32m+[m[32mOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE[m
[32m+[m[32mSOFTWARE.[m
\ No newline at end of file[m
[1mdiff --git a/README.md b/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..d7dfbde[m
[1m--- /dev/null[m
[1m+++ b/README.md[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32m# Path Explorator[m
[32m+[m
[32m+[m[32mWrapper for `pathlib` with extended functionality.[m
[32m+[m
[32m+[m[32mEvery class always takes STR in every method and always returns STR[m[41m [m
[32m+[m
[32m+[m[32m## Quick Start[m
[32m+[m[32m```python[m
[32m+[m[32mfrom path_explorator import PathExplorer[m
[32m+[m[32mexplorer = PathExplorer("your/path")[m
[32m+[m[32m```[m
[32m+[m[32mДОПИСАТЬ НАДО !!![m
[1mdiff --git a/foobar-scratch.py b/foobar-scratch.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1ffc826[m
[1m--- /dev/null[m
[1m+++ b/foobar-scratch.py[m
[36m@@ -0,0 +1 @@[m
[32m+[m[32m#say my name[m
\ No newline at end of file[m
[1mdiff --git a/pyproject.toml b/pyproject.toml[m
[1mnew file mode 100644[m
[1mindex 0000000..be8861d[m
[1m--- /dev/null[m
[1m+++ b/pyproject.toml[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32m[build-system][m
[32m+[m[32mrequires = ["setuptools>=61.0"][m
[32m+[m[32mbuild-backend = "setuptools.build_meta"[m
[32m+[m
[32m+[m[32m[project][m
[32m+[m[32mname = "path_explorator"[m
[32m+[m[32mversion = "0.0.2"[m
[32m+[m[32mauthors = [{ name = "BUTCHHO", email = "skeletorkoltmm@gmail.com" }][m
[32m+[m[32mdescription = "Wrapper for a pathlib"[m
[32m+[m[32mreadme = "README.md"[m
[32m+[m[32mrequires-python = ">=3.10"[m
[32m+[m[32mlicense = { text = "MIT" }[m
[32m+[m
[32m+[m[32m[project.urls][m
[32m+[m[32mHomepage = "https://github.com/BUTCHHO/path-explorator"[m
\ No newline at end of file[m
[1mdiff --git a/src/path_explorator/__init__.py b/src/path_explorator/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..f00cd18[m
[1m--- /dev/null[m
[1m+++ b/src/path_explorator/__init__.py[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mfrom path_explorator.core import explorer[m
[32m+[m[32mfrom path_explorator import exceptions[m
[32m+[m[32m__all__ = ['explorer', 'exceptions'][m
\ No newline at end of file[m
[1mdiff --git a/src/path_explorator/core/__init__.py b/src/path_explorator/core/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..c3b5665[m
[1m--- /dev/null[m
[1m+++ b/src/path_explorator/core/__init__.py[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mimport explorer[m
[32m+[m
[32m+[m[32m__all__ = ['explorer'][m
\ No newline at end of file[m
[1mdiff --git a/src/path_explorator/core/explorer/__init__.py b/src/path_explorator/core/explorer/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..1991a7c[m
[1m--- /dev/null[m
[1m+++ b/src/path_explorator/core/explorer/__init__.py[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mimport directory, path[m
[32m+[m
[32m+[m[32m__all__ = ['directory', 'path'][m
\ No newline at end of file[m
[1mdiff --git a/src/path_explorator/core/explorer/directory/__init__.py b/src/path_explorator/core/explorer/directory/__init__.py[m
[1mnew file mode 100644[m
[1mindex 0000000..a7bd990[m
[1m--- /dev/null[m
[1m+++ b/src/path_explorator/core/explorer/directory/__init__.py[m
[36m@@ -0,0 +1,2 @@[m
[32m+[m[32mfrom .actor import DirectoryActor[m
[32m+[m[32mfrom .directory_explorer import DirectoryExplorer[m
\ No newline at end of file[m
[1mdiff --git a/src/path_explorator/core/explorer/directory/actor.py b/src/path_explorator/core/explorer/directory/actor.py[m
[1mnew file mode 100644[m
[1mindex 0000000..85efbcf[m
[1m--- /dev/null[m
[1m+++ b/src/path_explorator/core/explorer/directory/actor.py[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32mfrom pathlib import Path[m
[32m+[m[32mclass DirectoryActor:[m
[32m+[m
[32m+[m[32m    def __init__(self, root_dir_abs_path: str):[m
[32m+[m[32m        if not isinstance(root_dir_abs_path, str):[m
[32m+[m[32m            raise TypeError(f'root_dir_abs_path argument must be str, not {type(root_dir_abs_path)}')[m
[32m+[m[32m        self.root_dir = Path(root_dir_abs_path)[m
[32m+[m[32m    def create_dir(self, path: str, name:str):[m
[32m+[m[32m        """[m
[32m+[m[32m        Creates directory/folder in specified path with specified name[m
[32m+[m[32m        :param path: Path to the location of the future directory.[m
[32m+[m[32m        The path must be relative to the root directory, which is passed as an argument to __init__ as root_dir_abs_path.[m
[32m+[m[32m        This rule is used in every object where root_dir_abs_path is passed during initialization.[m
[32m+[m[32m        :param name: name of dir[m
[32m+[m[32m        :return: None[m
[32m+[m[32m        """[m
[32m+[m[32m        if not isinstance(path, str):[m
[32m+[m[32m            raise TypeError(f'path argument must be str, not {type(path)}')[m
[32m+[m[32m        if not isinstance(name, str):[m
[32m+[m[32m            raise TypeError(f'name argument must be str, not {type(path)}')[m
[32m+[m[32m        root_dir = Path(self.root_dir, path, name)[m
[32m+[m[32m        root_dir.mkdir(exist_ok=True)[m
[32m+[m
[32m+[m[32m    def create_file(self, path: str, name: str):[m
[32m+[m[32m        """[m
[32m+[m[32m        Create file in specified path with specified name[m
[32m+[m[32m        :param path: Path to the location of the future file.[m
[32m+[m[32m        The path must be relative to the root directory, which is passed as an argument to __init__ as root_dir_abs_path.[m
